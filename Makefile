SHELL = bash
SWIG_VERSION = 4.0.2
CGO_FILES = Client.a Client.h
SWIG_FILES = Client.cs secrethub_wrap.c SecretHubXGOPINVOKE.cs Secret.cs SecretVersion.cs
TEST_FILES = Client.cs SecretHubXGOPINVOKE.cs Secret.cs SecretVersion.cs
OUT_FILES = secrethub_wrap.o libSecretHubXGO.so SecretHubXGO.dll
DOTNET_DIR = ./dotnet
DEPS = $(DOTNET_DIR)/secrethub_wrap.c $(DOTNET_DIR)/Client.h
OBJ = $(DOTNET_DIR)/secrethub_wrap.o $(DOTNET_DIR)/Client.a
OS_VAR = $(shell uname -s | tr A-Z a-z)

lib: client swig compile
	@echo "Library Ready ^-^"

ifeq ($(OS_VAR), Windows_NT)
.PHONY: client
client: secrethub_wrapper.go
	@echo "Making the C library from Go files (Windows)..."
	@GOOS=windows GOARCH=amd64 CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc go build -o $(DOTNET_DIR)/Client.a -buildmode=c-archive secrethub_wrapper.go

.PHONY: compile
compile: $(DEPS)
	@echo "Compiling..."
	@x86_64-w64-mingw32-gcc -c -O2 -fpic -o $(DOTNET_DIR)/secrethub_wrap.o $(DOTNET_DIR)/secrethub_wrap.c
	@x86_64-w64-mingw32-gcc -shared -fPIC $(OBJ) -o $(DOTNET_DIR)/SecretHubXGO.dll
else
.PHONY: client
client: secrethub_wrapper.go
	@echo "Making the C library from Go files (Linux)..."
	@go build -o $(DOTNET_DIR)/Client.a -buildmode=c-archive secrethub_wrapper.go

.PHONY: compile
compile: $(DEPS)
	@echo "Compiling..."
	@gcc -c -O2 -fpic -o $(DOTNET_DIR)/secrethub_wrap.o $(DOTNET_DIR)/secrethub_wrap.c
	@gcc -shared -fPIC $(OBJ) -o $(DOTNET_DIR)/libSecretHubXGO.so
endif

lib-all:
	@make OS_VAR=Linux lib --no-print-directory
	@make OS_VAR=Windows_NT lib --no-print-directory

.PHONY: swig
swig:
	@echo "Generating swig files..."
	@swig -csharp -namespace SecretHub $(DOTNET_DIR)/secrethub.i
#   Empty class generated by swig.
	@rm $(DOTNET_DIR)/SecretHubXGO.cs

# Environment variables used in tests
define TEST_ENV_VARS
TEST=secrethub://secrethub-xgo/dotnet/test-secret \
OTHER_TEST=secrethub://secrethub-xgo/dotnet/other-test-secret \
TEST_MORE_EQUALS=this=has=three=equals
endef
.PHONY: dotnet-test
dotnet-test: lib
	@echo "Testing the library..."
	@cp $(addprefix $(DOTNET_DIR)/, $(TEST_FILES)) $(DOTNET_DIR)/test
	@dotnet publish $(DOTNET_DIR)/test/secrethub.csproj -o $(DOTNET_DIR)/build --nologo
ifeq (OS_VAR, Windows_NT)
	@mv $(DOTNET_DIR)/SecretHubXGOSe.dll $(DOTNET_DIR)/build
else
	@mv $(DOTNET_DIR)/libSecretHubXGO.so $(DOTNET_DIR)/build
endif
	@$(TEST_ENV_VARS) dotnet test $(DOTNET_DIR)/build/secrethub.dll --nologo
	@make clean --no-print-directory

.PHONY: nupkg
nupkg: lib-all
	@echo "Making the NuGet Package..."
	@dotnet pack $(DOTNET_DIR)/secrethub.csproj -o $(DOTNET_DIR)/build --nologo
	@mv $(DOTNET_DIR)/build/SecretHub.*.nupkg .
	@make clean --no-print-directory
	@echo "NuGet Package Ready ^-^"

#.PHONY: nupkg-publish
#nupkg-publish: nupkg
#	dotnet nuget push *.nupkg --api-key <API_KEY> --source 	https://api.nuget.org/v3/index.json

.PHONY: deps
deps:
# 	install gcc
	@sudo apt install -qy gcc
	@sudo apt install -qy gcc-mingw-w64
# 	install pcre
	@sudo apt install -qy libpcre3-dev
# 	install swig
	@wget https://downloads.sourceforge.net/swig/swig-$(SWIG_VERSION).tar.gz
	@mkdir -p tmp && tar -xzvf swig-$(SWIG_VERSION).tar.gz -C tmp --strip-components 1
	@cd tmp && ./configure&& sudo make && sudo make install
	@rm -rf tmp swig-$(SWIG_VERSION).tar.gz
	@echo "export SWIG_PATH=usr/local/share/swig/bin" | sudo tee -a /etc/profile
	@echo "export PATH=$(SWIG_PATH):$(PATH)" | sudo tee -a /etc/profile
	@source /etc/profile


.PHONY: clean
clean:
	@rm -f go.sum
	@rm -f $(addprefix $(DOTNET_DIR)/, $(CGO_FILES) $(SWIG_FILES) $(OUT_FILES)) $(addprefix $(DOTNET_DIR)/test/, $(TEST_FILES))
	@rm -rf $(addprefix $(DOTNET_DIR)/, build bin obj test/bin test/obj)
